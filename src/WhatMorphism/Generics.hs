--------------------------------------------------------------------------------
{-# LANGUAGE TypeFamilies  #-}
{-# LANGUAGE TypeOperators #-}


--------------------------------------------------------------------------------
data Id a = Id a


--------------------------------------------------------------------------------
instance Functor Id where
    fmap f (Id x) = Id (f x)


--------------------------------------------------------------------------------
data Const a p = Const a


--------------------------------------------------------------------------------
instance Functor (Const a) where
    fmap _ (Const x) = Const x


--------------------------------------------------------------------------------
data (a :+: b) p = L (a p) | R (b p)
infixl 6 :+:


--------------------------------------------------------------------------------
instance (Functor a, Functor b) => Functor (a :+: b) where
    fmap f (L x) = L (fmap f x)
    fmap f (R x) = R (fmap f x)


--------------------------------------------------------------------------------
data (a :*: b) p = a p :*: b p
infixl 7 :*:


--------------------------------------------------------------------------------
instance (Functor a, Functor b) => Functor (a :*: b) where
    fmap f (x :*: y) = fmap f x :*: fmap f y


--------------------------------------------------------------------------------
newtype Fix f = Fix {unFix :: f (Fix f)}


--------------------------------------------------------------------------------
type List a = Fix (Const () :+: Const a :*: Id)


--------------------------------------------------------------------------------
fold :: Functor f => (f a -> a) -> Fix f -> a
fold alg = alg . fmap (fold alg) . unFix


--------------------------------------------------------------------------------
testList :: List Int
testList =
    (Fix $ R $ Const 4 :*:
        (Id $ Fix $ R $ Const 3 :*:
            (Id $ Fix $ R $ Const 2 :*:
                (Id $ Fix $ R $ Const 1 :*:
                    (Id $ Fix $ L $ Const ())))))


--------------------------------------------------------------------------------
testFold :: Int
testFold = fold alg testList
  where
    alg :: (Const () :+: Const Int :*: Id) Int -> Int
    alg (L _ )                 = 0
    alg (R (Const x :*: Id y)) = x + y


--------------------------------------------------------------------------------
type family Data f


--------------------------------------------------------------------------------
type instance Data (Id a) = a


--------------------------------------------------------------------------------
type instance Data (Const a p) = a


--------------------------------------------------------------------------------
-- TODO Data :+:


--------------------------------------------------------------------------------
type instance Data ((a :*: b) p) = (Data (a p), Data (b p))


--------------------------------------------------------------------------------
class GFold f where
    type Signature f a
    gfold :: Signature f a



{-
type family Algebra f


--------------------------------------------------------------------------------
type instance Algebra (Id a) = a -> a


--------------------------------------------------------------------------------
type instance Algebra (Const a p) = a -> p


--------------------------------------------------------------------------------
type instance Algebra ((a :+: b) p) = Data (a p) -> Algebra (b p)


--------------------------------------------------------------------------------
type instance Algebra ((a :*: b) p) = (Data (a p), Data (b p)) -> p


--------------------------------------------------------------------------------
gfold :: (Functor f, Algebra (f a) ~ (f a -> a)) => Algebra (f a) -> Fix f -> a
gfold alg = alg . fmap (gfold alg) . unFix


--------------------------------------------------------------------------------
testGFold 
-}
